import logging
from datetime import timedelta, datetime
from django.utils import timezone
from django.shortcuts import get_object_or_404
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from main.models import Houses, ReservedDates
from decouple import config

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATE_FORMAT = config("DATE_FORMAT", default="%d-%m-%Y")
ERROR_MESSAGES = {
    "no_start_date": "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.",
    "invalid_date": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD-MM-YYYY.",
    "house_not_found": "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    "dates_reserved": "‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã:\n{}",
    "no_houses": "–ö–æ—Ç—Ç–µ–¥–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
    "missing_params": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
    "invalid_period": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
    "server_error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {}",
}
SUCCESS_MESSAGES = {
    "confirm": "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!",
    "cancel": "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞ –¥–∞—Ç—ã: {}",
}
PERIOD_DAYS = {
    "week": 9,  # 9 –¥–Ω–µ–π –¥–ª—è –Ω–µ–¥–µ–ª–∏
    "month": 30,  # 30 –¥–Ω–µ–π –¥–ª—è –º–µ—Å—è—Ü–∞
}




def get_house(house_name: str) -> Houses:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞ –ø–æ –∏–º–µ–Ω–∏."""
    try:
        return Houses.objects.get(name=house_name)
    except Houses.DoesNotExist:
        logger.error(f"–î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {house_name}")
        raise ValueError(ERROR_MESSAGES["house_not_found"])


def parse_start_date(startdate_str: str) -> datetime.date:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç date."""
    if not startdate_str:
        raise ValueError(ERROR_MESSAGES["no_start_date"])
    try:
        return datetime.strptime(startdate_str, DATE_FORMAT).date()
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {startdate_str}")
        raise ValueError(ERROR_MESSAGES["invalid_date"])


@api_view(["POST"])
def confirm(request):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    booking_data = request.data
    house_name = booking_data.get("house")
    startdate_str = booking_data.get("startdate")
    day = int(booking_data.get("day", 1))
    person = booking_data.get("person")
    contact = booking_data.get("contact")
    additional_services = booking_data.get("additional_services", "")
    admin_text = booking_data.get("admin_text", "")

    try:
        house = get_house(house_name)
        startdate = parse_start_date(startdate_str)
    except ValueError as e:
        return Response({"message": str(e)}, status=status.HTTP_400_BAD_REQUEST)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç
    reserved_dates_info = []
    for i in range(day):
        booking_date = startdate + timedelta(days=i)
        reservation = ReservedDates.objects.filter(house=house, date=booking_date).first()
        if reservation:
            reserved_dates_info.append({
                "date": booking_date,
                "person": reservation.person,
                "contact": reservation.contact,
            })

    if reserved_dates_info:
        reserved_details = "\n".join(
            [f"{info['date']}: {info['person']} ({info['contact']})" for info in reserved_dates_info]
        )
        return Response(
            {"message": ERROR_MESSAGES["dates_reserved"].format(reserved_details)},
            status=status.HTTP_400_BAD_REQUEST,
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    for i in range(day):
        booking_date = startdate + timedelta(days=i)
        final_additional_services = additional_services
        if admin_text:
            final_additional_services += f"// –ê–î–ú–ò–ù: {admin_text}"
        ReservedDates.objects.create(
            house=house,
            date=booking_date,
            person=person,
            contact=contact,
            num_people="",
            total_amount="",
            additional_services=final_additional_services,
        )

    logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {house_name}, {startdate}, {day} –¥–Ω–µ–π")
    return Response({"message": SUCCESS_MESSAGES["confirm"]}, status=status.HTTP_201_CREATED)


@api_view(["POST"])
def cancel(request):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    booking_data = request.data
    house_name = booking_data.get("house")
    startdate_str = booking_data.get("startdate")
    day = int(booking_data.get("day", 1))
    person = booking_data.get("person")
    contact = booking_data.get("contact")

    try:
        house = get_house(house_name)
        startdate = parse_start_date(startdate_str)
    except ValueError as e:
        return Response({"message": str(e)}, status=status.HTTP_400_BAD_REQUEST)

    deleted_dates = []
    not_booked_dates = []
    occupied_dates = []

    for i in range(day):
        booking_date = startdate + timedelta(days=i)
        reservation = ReservedDates.objects.filter(house=house, date=booking_date).first()
        if reservation:
            if reservation.person == person and reservation.contact == contact:
                reservation.delete()
                deleted_dates.append(booking_date)
            else:
                occupied_dates.append(booking_date)
        else:
            not_booked_dates.append(booking_date)

    message = ""
    if deleted_dates:
        message += SUCCESS_MESSAGES["cancel"].format(", ".join(map(str, deleted_dates)))
    if not_booked_dates:
        message += f"\n‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(map(str, not_booked_dates))}."
    if occupied_dates:
        message += f"\nüö´ –°–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {', '.join(map(str, occupied_dates))}."

    status_code = status.HTTP_200_OK if deleted_dates else status.HTTP_400_BAD_REQUEST
    logger.info(f"–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {house_name}, {startdate}, {day} –¥–Ω–µ–π, —É—Å–ø–µ—Ö: {bool(deleted_dates)}")
    return Response({"message": message.strip()}, status=status_code)

@api_view(["POST"])
def check_houses(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ–≤."""
    houses = Houses.objects.all().values("id", "name")
    if not houses:
        logger.warning("–ö–æ—Ç—Ç–µ–¥–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return Response({"message": ERROR_MESSAGES["no_houses"]}, status=status.HTTP_404_NOT_FOUND)
    return Response(list(houses), status=status.HTTP_200_OK)

@api_view(["POST"])
def get_reserved_dates(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç."""
    data = request.data
    house_id = data.get("house_id")
    period = data.get("period")

    if not house_id or not period:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: house_id –∏–ª–∏ period")
        return Response({"message": ERROR_MESSAGES["missing_params"]}, status=status.HTTP_400_BAD_REQUEST)

    try:
        house = get_object_or_404(Houses, id=house_id)
        if period not in PERIOD_DAYS:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")
            return Response({"message": ERROR_MESSAGES["invalid_period"]}, status=status.HTTP_400_BAD_REQUEST)

        current_date = timezone.now().date()
        start_date = current_date
        end_date = current_date + timedelta(days=PERIOD_DAYS[period])

        reserved_dates = ReservedDates.objects.filter(
            house=house, date__range=[start_date, end_date]
        ).order_by("date")

        result = [
            {
                "date": reservation.date.strftime("%Y-%m-%d"),
                "person": reservation.person,
                "contact": reservation.contact,
                "num_people": reservation.num_people,
                "total_amount": reservation.total_amount,
                "additional_services": reservation.additional_services,
            }
            for reservation in reserved_dates
        ]

        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –¥–æ–º–∞ {house.name}, –ø–µ—Ä–∏–æ–¥: {period}")
        return Response({"house_name": house.name, "reserved_dates": result}, status=status.HTTP_200_OK)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç: {str(e)}")
        return Response({"message": ERROR_MESSAGES["server_error"].format(str(e))}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)