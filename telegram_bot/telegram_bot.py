import logging
import re
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import httpx
from decouple import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.handlers.RotatingFileHandler("bot.log", maxBytes=10485760, backupCount=5),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = config("TELEGRAM_BOT_TOKEN")
TELEGRAM_GROUP_CHAT_ID = config("TELEGRAM_GROUP_CHAT_ID", cast=int)
API_BASE_URL = config("API_BASE_URL", default="http://127.0.0.1:8000/api/")


# –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

async def process_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, endpoint: str, action: str) -> None:
    query = update.callback_query
    await query.answer()

    message_text = query.message.text
    reply_markup = query.message.reply_markup
    booking_data = extract_booking_data(message_text)

    if booking_data is None:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_BASE_URL}{endpoint}/", json=booking_data)
        response_data = response.json()
        result_message = response_data.get("message", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    except Exception as e:
        result_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

    updated_message = f"{message_text}\n\n{result_message}"
    await query.edit_message_text(
        text=updated_message,
        reply_markup=reply_markup,
        parse_mode="HTML",
    )

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await process_booking(update, context, "confirm", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await process_booking(update, context, "cancel", "–æ—Ç–º–µ–Ω–µ")

def extract_booking_data(message_text):
    booking_data = {}
    lines = message_text.strip().split("\n")
    for line in lines:
        if line.startswith("–î–û–ú:"):
            booking_data["house"] = line.split("–î–û–ú: ")[1].strip()
        elif line.startswith(" –ó–ê–ï–ó–î:"):
            booking_data["startdate"] = line.split("–ó–ê–ï–ó–î:")[1].strip()
        elif line.startswith(" –°–£–¢–û–ö:"):
            booking_data["day"] = line.split("–°–£–¢–û–ö: ")[1].strip()
        elif line.startswith(" –ò–ú–Ø:"):
            booking_data["person"] = line.split("–ò–ú–Ø: ")[1].strip()
        elif line.startswith(" –ù–û–ú–ï–†:"):
            booking_data["contact"] = line.split("–ù–û–ú–ï–†: ")[1].strip()
        elif line.startswith("  –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:"):
            booking_data["additional_services"] = line.split("–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: ")[1].strip()
        elif line.startswith("–ê–î–ú–ò–ù:"):
            booking_data["admin_text"] = line.split("–ê–î–ú–ò–ù: ")[1].strip()
    return booking_data if booking_data else None

async def change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    notification = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=(
            "–í–∞–º –Ω–∞–¥–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –≤ –Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n"
            "–ó–∞—Ç–µ–º '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—à–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!'\n\n"
            "–ò–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' –∏ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è –ê–î–ú–ò–ù –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ),
    )
    await asyncio.sleep(8)
    await notification.delete()


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    if not message_text:
        return

    message_text = message_text.lower()
    if message_text == "–º–µ–Ω—é":
        keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã", callback_data="booked_dates")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=reply_markup,
        )
    elif update.message.reply_to_message and update.message.reply_to_message.from_user.is_bot:
        replied_message = update.message.reply_to_message
        comment_text = update.message.text
        original_text = replied_message.text
        if "–ê–î–ú–ò–ù:" in original_text:
            lines = original_text.split("\n")
            updated_lines = [f"–ê–î–ú–ò–ù: {comment_text}" if line.startswith("–ê–î–ú–ò–ù:") else line for line in lines]
            new_text = "\n".join(updated_lines)
        else:
            new_text = original_text + f"\n\n–ê–î–ú–ò–ù: {comment_text}"
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=replied_message.message_id,
            text=new_text,
            reply_markup=replied_message.reply_markup,
        )

async def booked_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_BASE_URL}check_houses/")
        if response.status_code == 200:
            response_data = response.json()
            buttons = [[InlineKeyboardButton(f"üè† {house['name']}", callback_data=f"house_{house['id']}")] for house in response_data]
            result_message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º:"
        else:
            result_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—Ö."
            buttons = []
    except Exception as e:
        result_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}"
        buttons = []
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(
        text=result_message,
        reply_markup=reply_markup,
        parse_mode="HTML",
    )

async def handle_house_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    house_id = query.data.split("_")[1]
    await query.answer()
    period_buttons = [
        [InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data=f"week_{house_id}")],
        [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data=f"month_{house_id}")],
    ]
    reply_markup = InlineKeyboardMarkup(period_buttons)
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç:",
        reply_markup=reply_markup,
    )

async def handle_period_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    try:
        period, house_id = query.data.split("_")
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}get_reserved_dates/",
                json={"house_id": house_id, "period": period},
            )
        if response.status_code == 200:
            response_data = response.json()
            reserved_dates = response_data.get("reserved_dates", [])
            house_name = response_data.get("house_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º")
            reserved_message = "\n".join(
                [
                    f"<b>{date['date']}</b> - <b>{date['person']}</b> <code>{date['contact']}</code> // —á–µ–ª.: {date['num_people']} // –¥–æ–ø.: {date['additional_services']},"
                    for date in reserved_dates
                ]
            )
            result_message = (
                f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è <b>{house_name}</b>:\n\n{reserved_message}"
                if reserved_message
                else f"–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç –¥–ª—è <b>{house_name}</b>"
            )
        else:
            result_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ö."
    except Exception as e:
        result_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}"
    await query.edit_message_text(text=result_message, parse_mode="HTML")



def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(booked_dates, pattern="^booked_dates$"))
    application.add_handler(CallbackQueryHandler(handle_house_selection, pattern=r"^house_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_period_selection, pattern=r"^(week|two_weeks|month)_\d+$"))
    application.add_handler(CallbackQueryHandler(confirm, pattern="confirm:*"))
    application.add_handler(CallbackQueryHandler(cancel, pattern="cancel:*"))
    application.add_handler(CallbackQueryHandler(change, pattern="^change$"))
    application.run_polling()

if __name__ == "__main__":
    main()